################################################################
# 
# Project:  elvin.org
# File:     @(#)$Id: Makefile.config,v 1.3 2006/06/06 05:39:46 d Exp $
#
################################################################
#
# the basic idea of this section is to allow configuration of mirrors
# of the Elvin web from a single place.  depending on the DNS domain
# name of the building host, this file will set the various parameters
# to the web source.
#
# new mirrors should be configured by adding to this section.
#
################################################################
# get the domain name
#
OS := $(shell uname -s)
ifeq ($(findstring Linux,$(OS)),Linux)
DOMAINNAME := $(shell dnsdomainname)
else
DOMAINNAME := $(shell domainname)
endif

HOSTNAME := $(shell hostname)


################################################################
# set some defauls.  these may be overridden by other configs
# below
#
ORG_SERVER := file://
ORG_ROOT := /tmp/elvin.org
INSTALL_DIR := /tmp/elvin.org
CGI_PATH := /tmp/elvin.org/cgi-bin

M4 := m4
IMODEFILE := 644
IMODECGI := 755

ifeq ($(NOTIFY),)
# The Makefile didn't specify whether to notify
NOTIFY := maybe
endif

EP_ARGS := -e elvin://localhost

UPDATE := $(shell date "+%e %B %Y")

################################################################
#  www.0x1.org
#
ifeq ($(findstring server.0x1.org,$(HOSTNAME)),server.0x1.org)
ORG_SERVER := http://www.elvin.org
ORG_ROOT :=
INSTALL_DIR := /u1/www/www.elvin.org
CGI_PATH := /u1/www/www.elvin.org/cgi-bin

# This is correct!
M4 := /usr/bin/m4
IMODEFILE := 644
IMODECGI := 755

endif


################################################################
#  laika.gnusto.com
#
ifeq ($(findstring laika.gnusto.com,$(HOSTNAME)),laika.gnusto.com)
ORG_SERVER := http://www.elvin.org
ORG_ROOT :=
INSTALL_DIR := /data/www/www.elvin.org/docs
CGI_PATH := /data/www/www.elvin.org/cgi

M4 := /usr/bin/m4
IMODEFILE := 644
IMODECGI := 755

endif


################################################################

M4_ARGS := -I . -I $(INCLUDE) \
		-DORG_SERVER=$(ORG_SERVER) \
		-DORG_ROOT=$(ORG_ROOT) \
		-DINSTALL_DIR=$(INSTALL_DIR) \
		-DUPDATE="$(UPDATE)"

%.html: %.htmi
	@echo Generating $(TARGET)/$@
	$(M4) $(M4_ARGS) $< > $@
	@chmod 664 $@

%.shtml: %.shtmi
	@echo Generating $(TARGET)/$@
	$(M4) $(M4_ARGS) $< > $@
	@chmod 664 $@

%.sh: %.sh.in
	@echo Generating $(TARGET)/$@
	$(M4) $(M4_ARGS) $< > $@
	@chmod 664 $@


################################################################

ifeq ($(NOTIFY),maybe)
# Assume notification is not wanted (all machines except the public
# server)
NOTIFY := no
endif


################################################################

GEN_FILES := $(subst sh.in,sh,$(subst shtmi,shtml,$(subst htmi,html,$(SRC_FILES))))

################################################################

build:: $(GEN_FILES)

clean::
	rm -f $(GEN_FILES)

install::
	@(if [ -n "$(GEN_FILES)" ] ; then \
		set - $(GEN_FILES); \
		for F do \
			mkdir -p `dirname $(INSTALL_DIR)/$(TARGET)/$$F`; \
			if diff $$F $(INSTALL_DIR)/$(TARGET)/$$F >/dev/null 2>/dev/null; then \
				echo "$(INSTALL_DIR)/$(TARGET)/$$F unchanged"; \
			else \
				if [ -f "$(INSTALL_DIR)/$(TARGET)/$$F" ]; then \
					what=updated; \
				else \
					what=added; \
				fi; \
				cp $$F $(INSTALL_DIR)/$(TARGET)/$$F; \
				chmod $(IMODEFILE) $(INSTALL_DIR)/$(TARGET)/$$F; \
				echo $(INSTALL_DIR)/$(TARGET)/$$F; \
				if [ $(NOTIFY) = yes ]; then \
					"$(SCRIPT_DIR)"/notify $$what "$(PUBLIC_SERVER)/$(TARGET)/$$F" $(EP_ARGS) 2>/dev/null & \
				fi; \
			fi; \
		done; \
	fi; \
	if [ -n "$(RAW_FILES)" ] ; then \
		set - $(RAW_FILES); \
		for F do \
			mkdir -p `dirname $(INSTALL_DIR)/$(TARGET)/$$F`; \
			if diff $$F $(INSTALL_DIR)/$(TARGET)/$$F >/dev/null 2>/dev/null; then \
				echo "$(INSTALL_DIR)/$(TARGET)/$$F unchanged"; \
			else \
				if [ -f "$(INSTALL_DIR)/$(TARGET)/$$F" ]; then \
					what=updated; \
				else \
					what=added; \
				fi; \
				cp $$F $(INSTALL_DIR)/$(TARGET)/$$F; \
				chmod $(IMODEFILE) $(INSTALL_DIR)/$(TARGET)/$$F; \
				echo $(INSTALL_DIR)/$(TARGET)/$$F; \
				if [ $(NOTIFY) = yes ]; then \
					"$(SCRIPT_DIR)"/notify $$what "$(PUBLIC_SERVER)/$(TARGET)/$$F" $(EP_ARGS) 2>/dev/null & \
				fi; \
			fi; \
		done; \
	fi; \
	if [ -n "$(CGI_FILES)" ] ; then \
		set - $(CGI_FILES); \
		for F do \
			mkdir -p `dirname $(CGI_PATH)/$(TARGET)/$$F`; \
			if diff $$F $(CGI_PATH)/$(TARGET)/$$F >/dev/null 2>/dev/null; then \
				echo "$(CGI_PATH)/$(TARGET)/$$F unchanged"; \
			else \
				if [ -f "$(CGI_PATH)/$(TARGET)/$$F" ]; then \
					what=updated; \
				else \
					what=added; \
				fi; \
				cp $$F $(CGI_PATH)/$(TARGET)/$$F; \
				chmod $(IMODECGI) $(CGI_PATH)/$(TARGET)/$$F; \
				echo $(CGI_PATH)/$(TARGET)/$$F; \
				if [ $(NOTIFY) = yes ]; then \
					"$(SCRIPT_DIR)"/notify $$what "$(PUBLIC_SERVER)/$(TARGET)/$$F" $(EP_ARGS) 2>/dev/null & \
				fi; \
			fi; \
		done; \
	fi)

uninstall::
	@(if [ -n "$(GEN_FILES)" ] ; then \
		set - $(GEN_FILES); \
		for F do \
			if [ -f $(INSTALL_DIR)/$(TARGET)/$$F; then \
				removed=1; \
			else
				removed=0; \
			fi; \
			rm -f $(INSTALL_DIR)/$(TARGET)/$$F; \
			echo $(INSTALL_DIR)/$(TARGET)/$$F; \
			if [ $$removed = 1 ]; then \
				"$(SCRIPT_DIR)"/notify removed "$(PUBLIC_SERVER)/$(TARGET)/$$F" $(EP_ARGS) 2>/dev/null & \
			fi; \
		done; \
	fi; \
	if [ -n "$(RAW_FILES)" ] ; then \
		set - $(RAW_FILES); \
		for F do \
			if [ -f $(INSTALL_DIR)/$(TARGET)/$$F; then \
				removed=1; \
			else
				removed=0; \
			fi; \
			rm -f $(INSTALL_DIR)/$(TARGET)/$$F; \
			echo $(INSTALL_DIR)/$(TARGET)/$$F; \
			if [ $$removed = 1 ]; then \
				"$(SCRIPT_DIR)"/notify removed "$(PUBLIC_SERVER)/$(TARGET)/$$F" $(EP_ARGS) 2>/dev/null & \
			fi; \
		done; \
	fi)

build clean install uninstall::
	@(if [ -n "$(SUB_DIRS)" ]; then \
		set - $(SUB_DIRS); \
		for D do \
			(cd $$D; \
			$(MAKE) $@) ; \
		done; \
	fi)

################################################################

.PHONY: all build clean install uninstall

################################################################
